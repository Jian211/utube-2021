7/20
    Using the blueprint complete the server.js file and create an Express server.
    This server should have 4 GET routes.
    The routes are /, /about, /contact and /login.
    All the routes should return HTML to the client.

7/21
    URL Logger: This middleware should log the URL that is being visited.
    Time Logger: This middleware should log the year, month and day o   f the request.
    Security Logger: This middleware should log secure if the protocol is https     else log insec  ure.
    Protector Middleware: This middleware should stop the user if it's trying to go to /protected

7/23
    Create 3 routers: globalRouter, storyRouter and userRouter
    Inside of the routers create the following GET routes:
    /
    /trending
    /new
    /join
    /login
    /users
    /users/:id
    /users/edit-profile
    /stories/:id
    /stories/:id/edit
    /stories/:id/delete
    Distribute these routes between the globalRouter, storyRouter and userRouter

7/26
    Replace all the res.send in the controllers with res.render().
    Create .pug templates for each controller.
    All templates should extend from a layout.pug.
    Create partials for footer, head and header.
    Your templates should get a pageTitle variable from the controllers.
    Add default styles using MVP.css.
    (Pug is already configured on the blueprint)

7/28
    On today's bluprint, you will find 3 functions on the movieController.jsfile. Your task today is to complete them!

    home should list all the movies.
    movieDetail should show a movie based on the :id
    filterMovie should filter for a movies based on the rating or the year
    There is a db.js file already made for you, you don't need to touch it. The db.js exports the following functions:

    getMovieById finds a movie with a provided ID (i.e: getMovieById(123))
    getMovies returns an array of all the movies on the DB (i.e: getMovies())
    getMovieByMinimumRating returns an array of the movies with a rating bigger than X (i.e: getMovieByMinimumRating(5))
    getMovieByMinimumYear returns an array of the movies published after a year X (i.e: getMovieByMinimumYear(2012))
    You also have to complete the movieRouter.js file. Make three URLS: / /:id and /filter

    The views folder is empty. Make partials, layouts and mixins to show the movies.

    .render("search",{
        pageTitle : " search",
        year,
        rating,       
        movieRating,
        movieYears

7/29
    Today we are gonna continue yesterday's movie project, today we are going to upload a movie.

    On the movieController file, make a controller or controllers to upload a movie.
    This means you need to handle GET and POST requests.
    You will also have to create an /add route.
    To add a movie to the database, there is an exported function called addMovie, this function takes one argument, this argument should be an object.
    The object should contain title (string), synopsis(string), genres (array of strings)
    Movies have an array of 'genres', make sure you render them using each in in Pug

    동영상 컨트롤러 파일에서 동영상을 업로드할 컨트롤러를 만듭니다.
    즉, GET 및 POST 요청을 처리해야 합니다.
    또한 /add 경로를 생성해야 합니다.
    데이터베이스에 영화를 추가하기 위해 addMovie라는 내보낸 함수가 있습니다.
    이 함수는 하나의 인수를 취하며 이 인수는 객체여야 합니다.
    
7/30
    Today is friday, so this assignment will be short! 어늘은 맛있는 삼겹살을 즐겨주세요!

    All we have to do today is to create a Movie model.
    Complete the models/Movie.js file.
    The Movie model should have a title, summary, year, rating, genres
    genres should be an array of strings.
    All the fields are required.

8/2~8/3
    With the provided blueprint create a CRUD (Create, Read, Update, Delete) using MongoDB.

    These are the URLs (+ Controllers) you need to create:

    / See all movies (GET)
    /upload See a form to create a movie (GET) and save the movie to the DB (POST)
    /movies/:id See a Movie (GET)
    /movies/:id/edit Edit a Movie (POST)
    /movies/:id/delete Delete a Movie (GET)
    /search Search movies by title (GET)
    Requirements
    Use mixins, layouts and partials with Pug.
    Use async/await on your controllers.
    Use mvp.css
    🚧🚧🚧🚧🚧🚧

    Before You Start
    On /src/models/Movie.js please change the line 11 of the code.

    Change null for your username.

    We do this so we can share the same DB.

    🚧🚧🚧🚧🚧🚧

8/6
    With the provided blueprint build a username / password authentication system! These are the routes you need to create:

    /join: This route should render a form to create an account (GET, POST).
    /login: This route should render a form to log in (GET, POST).
    /: This route should check if you are logged in or not, if you are it should show you your profile, if you are not it should send you to /login.
    You will need to complete the User model. (username, name, password).
    You will need to complete the userController and userRouter.
    You will also need to make the .pug files.
    Passwords must be securely stored, use bcrypt.
    username must be unique
    The forms should display errors (wrong password, wrong password confirmation, username already taken)
    express-session is already configured.
    mvp.css is already configured.